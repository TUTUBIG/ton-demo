#include "../imports/stdlib.fc";
#include "../lib/export.fc";
#include "../utils/export.fc";

#include "../router/export.fc";

#include "storage1.fc";

() @close() impure inline_ref {

    int value_remaining = fee::red_packet::close(my_balance:coin, msg_value:coin);


    int refund_amount:u256 = 0;
    if (_packet_type:u8 == type::red_packet::single) {

        (
            int total_supply:u256,
            int remaining_supply:u256
        ) = @Single_data::de(_packet_data:cell);

        throw_unless(305, total_supply:u256 == remaining_supply:u256);

        refund_amount:u256 = remaining_supply:u256;

    }
    if (_packet_type:u8 == type::red_packet::multiple_fixed) {

        (
            int total_supply:u256,
            int remaining_supply:u256,
            int total_pack:u16,
            int remaining_pack:u16
        ) = @Multiple_fix_data::de(_packet_data:cell);

        throw_unless(306, 0 < remaining_supply:u256);
        throw_unless(307, 0 < remaining_pack:u16);

        refund_amount:u256 = remaining_supply:u256;

    }
    if (_packet_type:u8 == type::red_packet::multiple_random) {

        (
            int total_supply:u256,
            ;;需要在一开始留出total_pack:u16个coin,保证每人至少分到1个
            ;;remaining_supply:u256里
            int remaining_supply:u256,
            int total_pack:u16,
            int remaining_pack:u16
        ) = @Multiple_random_data::de(_packet_data:cell);

        throw_unless(308, 0 < remaining_pack:u16);

        refund_amount:u256 = remaining_supply:u256;
    }

    _state:u8 = state::red_packet::refund;

    ;;ask router to send token
    send_message_ref(
        value_remaining + fee::router::refund::tx_fee(),
        _router:addr,
        op::router::refund,
        query_id:u64,
        router::Refund::se(
            _token:addr,
            refund_amount:u256,
            _create:addr,
            _red_packet_index:u64
        ),
        PAID_EXTERNALLY,
        TRUE:u1,
        null()
    );


    return ();
}
