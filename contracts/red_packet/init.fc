#include "../imports/stdlib.fc";
#include "../lib/export.fc";
#include "../utils/export.fc";

#include "../router/export.fc";

#include "request.fc";
#include "storage1.fc";

() @init(int packet_type:u8, slice token:addr, int amount:u256, slice creater:addr, cell red_packet_init_data:cell) impure inline_ref {

    int value_remaining = fee::red_packet::init(my_balance:coin, msg_value:coin);

    if (packet_type:u8 == type::red_packet::single) {

        _ = red_packet::Init_single::de(red_packet_init_data:cell);

        throw_unless(112, 0 < amount:u256);

        _packet_data:cell = @Single_data::se(amount:u256, amount:u256);
    }
    if (packet_type:u8 == type::red_packet::multiple_fixed) {

        (int total_pack:u16) = red_packet::Init_multiple_fix::de(red_packet_init_data:cell);

        throw_unless(112, 0 < amount:u256);
        throw_unless(112, 1 < total_pack:u16);

        _packet_data:cell = @Multiple_fix_data::se(amount:u256, amount:u256, total_pack:u16, total_pack:u16);
    }
    if (packet_type:u8 == type::red_packet::multiple_random) {

        (int total_pack:u16) = red_packet::Init_multiple_random::de(red_packet_init_data:cell);

        throw_unless(112, 0 < amount:u256);
        throw_unless(112, 1 < total_pack:u16);

        _packet_data:cell = @Multiple_random_data::se(amount:u256, amount:u256, total_pack:u16, total_pack:u16);
    }

    _state:u8 = state::red_packet::normal;
    _packet_type:u8 = packet_type:u8;
    _token:addr = token:addr;
    _create:addr = creater:addr;

    send_message_ref(value_remaining + fee::router::create_finished::tx_fee(), _router:addr, op::router::create_finished, query_id:u64, router::Create_finished::se(packet_type:u8, _token:addr, amount:u256, _packet_data:cell),
        PAID_EXTERNALLY,
        TRUE:u1,
        null()
    );

    return ();
}
