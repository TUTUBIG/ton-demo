#include "../imports/stdlib.fc";

cell red_packet::Init::se(
int packet_type:u8,
slice token:addr,
int amount:u256,
slice creater:addr,
cell red_packet_init_data:cell
) impure {
    ~strdump("red_packet::Init::se");
    return begin_cell()
        .store_uint(packet_type:u8, 8)
        .store_slice(token:addr)
        .store_uint(amount:u256, 256)
        .store_slice(creater:addr)
        .store_ref(red_packet_init_data:cell)
        .end_cell();
}

(int, slice, int, slice, cell) red_packet::Init::de(cell input) impure {
    ~strdump("red_packet::Init::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(8), s~load_msg_addr(), s~load_uint(256), s~load_msg_addr(),
        s~load_ref()
    );
}

;;===========================================================================
cell red_packet::Init_single::se(
) impure {
    ~strdump("red_packet::Init_single::se");
    return begin_cell()
        .end_cell();
}

() red_packet::Init_single::de(cell input) impure {
    ~strdump("red_packet::Init_single::de");
    slice s = input.begin_parse();
    return (
    );
}

;;===========================================================================
cell red_packet::Init_multiple_fix::se(
int total_pack:u16
) impure {
    ~strdump("red_packet::Init_multiple_fix::se(");
    return begin_cell()
        .store_uint(total_pack:u16, 16)
        .end_cell();
}

(int) red_packet::Init_multiple_fix::de(cell input) impure {
    ~strdump("red_packet::Init_multiple_fix::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(16)
    );
}

;;===========================================================================
cell red_packet::Init_multiple_random::se(
int total_pack:u16
) impure {
    ~strdump("red_packet::Init_multiple_random::se");
    return begin_cell()
        .store_uint(total_pack:u16, 16)
        .end_cell();
}

(int) red_packet::Init_multiple_random::de(cell input) impure {
    ~strdump("red_packet::Init_multiple_random::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(16)
    );
}

;;===========================================================================
cell red_packet::Claim::se(slice recipient:addr) impure {
    ~strdump("red_packet::Claim::se");
    return begin_cell()
        .store_slice(recipient:addr)
        .end_cell();
}

(slice) red_packet::Claim::de(cell input) impure {
    ~strdump("red_packet::Claim::de");
    slice s = input.begin_parse();
    return (
        s~load_msg_addr()
    );
}


;;===========================================================================
cell red_packet::Close::se(
) impure {
    ~strdump("red_packet::Close::se");
    return begin_cell()
        .end_cell();
}

() red_packet::Close::de(cell input) impure {
    ~strdump("red_packet::Close::de");
    slice s = input.begin_parse();
    return ();
}
